const fs = require('fs');

// Function to decode a value from a given base
function decodeValue(base, value) {
    return parseInt(value, base);
}

// Function to perform Lagrange interpolation and find constant term (c)
function lagrangeInterpolation(points) {
    let c = 0;
    for (let i = 0; i < points.length; i++) {
        let xi = points[i][0];
        let yi = points[i][1];
        let term = yi;

        for (let j = 0; j < points.length; j++) {
            if (i !== j) {
                let xj = points[j][0];
                term *= -xj / (xi - xj);
            }
        }
        c += term;
    }
    return Math.round(c);
}

// Function to read JSON input and process test cases
function processTestCase(filePath) {
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    const keys = data.keys;
    const n = keys.n;
    const k = keys.k;
    const points = [];

    Object.keys(data).forEach((key) => {
        if (key !== "keys") {
            const x = parseInt(key);
            const base = parseInt(data[key].base);
            const y = decodeValue(base, data[key].value);
            points.push([x, y]);
        }
    });

    if (points.length >= k) {
        return lagrangeInterpolation(points.slice(0, k));
    } else {
        throw new Error("Not enough points to determine the polynomial");
    }
}

// Example usage with test case file paths
const testCase1 = 'testcase1.json';
const testCase2 = 'testcase2.json';

console.log("Secret for test case 1:", processTestCase(testCase1));
console.log("Secret for test case 2:", processTestCase(testCase2));
